function [raw] = importdiagfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23,V24,V25,V26,V27,V28,VARNAME29]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23,V24,V25,V26,V27,V28,VARNAME29]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12,V13,V14,V15,V16,V17,V18,V19,V20,V21,V22,V23,V24,V25,V26,V27,V28,VarName29]
%   =
%   importfile('INSTR_DIAGNOSTICS_BYFIRM_1MPIDLags_5DepVarLags_30sec_1.txt',2,
%   9);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/27 16:12:25

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
V1 = cell2mat(raw(:, 1));
V2 = cell2mat(raw(:, 2));
V3 = cell2mat(raw(:, 3));
V4 = cell2mat(raw(:, 4));
V5 = cell2mat(raw(:, 5));
V6 = cell2mat(raw(:, 6));
V7 = cell2mat(raw(:, 7));
V8 = cell2mat(raw(:, 8));
V9 = cell2mat(raw(:, 9));
V10 = cell2mat(raw(:, 10));
V11 = cell2mat(raw(:, 11));
V12 = cell2mat(raw(:, 12));
V13 = cell2mat(raw(:, 13));
V14 = cell2mat(raw(:, 14));
V15 = cell2mat(raw(:, 15));
V16 = cell2mat(raw(:, 16));
V17 = cell2mat(raw(:, 17));
V18 = cell2mat(raw(:, 18));
V19 = cell2mat(raw(:, 19));
V20 = cell2mat(raw(:, 20));
V21 = cell2mat(raw(:, 21));
V22 = cell2mat(raw(:, 22));
V23 = cell2mat(raw(:, 23));
V24 = cell2mat(raw(:, 24));
V25 = cell2mat(raw(:, 25));
V26 = cell2mat(raw(:, 26));
V27 = cell2mat(raw(:, 27));
V28 = cell2mat(raw(:, 28));
V29 = cell2mat(raw(:, 29));
V30 = cell2mat(raw(:, 30));
V31 = cell2mat(raw(:, 31));
V32 = cell2mat(raw(:, 32));
VarName33 = cell2mat(raw(:, 33));